<%--
  The Broad Institute
 SOFTWARE COPYRIGHT NOTICE AGREEMENT
 This software and its documentation are copyright (2003-2022) by the
 Broad Institute. All rights are reserved.

 This software is supplied without any warranty or guaranteed support
 whatsoever. The Broad Institute cannot be responsible for its
 use, misuse, or functionality.
--%>
<%@ page import="org.genepattern.server.util.MessageUtils" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>GenePattern add/update module help</title>
<style>
.example { font-family: Courier, Courier New, serif; font-size: 10pt; }
.exampleLink { font-family: Courier, Courier New, serif; font-size: 10pt; color: blue; text-decoration: underline}
</style>
<%
MessageUtils messages = new MessageUtils();
%>
</head>

<body>


<a name="propertiesHelp"></a>
<h2>Module Properties</h2>
A person creates a module to share an algorithm or utility with other <%=messages.get("ApplicationName")%> users.
The module properties describe the program used to execute the algorithm or utility, its
parameters and other useful information. Following are brief descriptions of each
module property:
    <p>
        <a name="Name_brief"></a><strong>Name</strong><br>Name of the module.</p>
    <p>
        <a name="LSID_brief"></a><strong>LSID</strong><br>The Life Science Identifier (LSID) used to uniquely identify a GenePattern module.</p>
    <p>
        <a name="Description_brief"></a><strong>Description</strong><br>
        Brief description of the module.
    </p>
    <p>
        <a name="Author_brief"></a><strong>Author</strong><br>
    The author&#39;s name and affiliation (company or academic institution).
    </p>
    <p>
        <a name="License_brief"></a><strong>License</strong><br>
        The End-User license agreement for the module.
    </p>
    <p>
        <a name="Privacy_brief"></a><strong>Privacy</strong><br>
        Modules may be marked as public or private:
    </p>
        <ul>
            <li>
                Public modules may be accessed by anyone using the GenePattern server.</li>
            <li>
                Private modules may be accessed only by the person who installed or created the module (or by an administrator).</li>
        </ul>
    <p>
        <a name="Quality_brief"></a><strong>Quality level</strong><br>
One of three terms that indicates the author&rsquo;s confidence in the robustness of the module: development, preproduction, and production.</p>
    <p>
        <a name="Documentation_brief"></a><strong>Documentation</strong><br>
Help URL (or file) that describes the module and provides instructions
for its use.</p>
    <p>
        <a name="Source_repo_brief"></a><strong>Source code repository</strong><br>
Source repository URL - specific to the tag or release of the module version.
    </p>
    <p>
        <a name="DockerImage_brief"></a><strong>Docker Image</strong><br/>
The docker image in which to run the module command line.
    <p>
        <a name="Command_brief"></a><strong>Command line</strong><br>
Command line used to launch the module. Values enclosed in angle brackets are replaced by specific values before the command executes.</p>
    <p>
        <a name="TaskType_brief"></a><strong>Module category</strong><br>
Category under which to list this module. Categories are used to organize modules and pipelines on the GenePattern home page. Pipelines are always assigned to the category name <em>pipeline</em>.</p>
    <p>
        <a name="cpu_brief"></a><strong>CPU type</strong><br>
Indicates the type of CPU required to run the module, or <em>any</em> if the module runs on any type of CPU.</p>
    <p>
        <a name="os_brief"></a><strong>Operating system</strong><br>
Indicates the operating system required to run the module, or <em>any</em> if the module runs on any operating system.</p>
    <p>
        <a name="Language_brief"></a><strong>Language</strong><br>
 Indicates the programming language used to implement the module.</p>
    <p>
        <a name="MinLanguage_brief"></a><strong>min. language version</strong><br>
Indicates the version of the programming language used to implement the module.</p>
    <p>
        <a name="VersionComment_brief"></a><strong>Version comment</strong><br>
Describes changes made to the module in this version.</p>
    <p>
        <a name="FileFormat_brief"></a><strong>File format(s)</strong><br>
Lists the file formats of any output files generated by the module.</p>
    <p>
        <a name="Files_brief"></a><strong>Current files</strong><br>
Lists the support files packaged with the module, such as executable programs, documentation, and so on.</p>
    <p>
        <a name="Parameters_brief"></a><strong>Parameters</strong><br>
Lists the module parameters, including the file formats of any input files required by the module.</p>

<p>
        <a name="Memory_brief"></a><strong>Job Memory</strong><br>
Sets the default value for the memory allocation limit when this module is run.</p>
<p>
        <a name="cpuCount_brief"></a><strong>Job cpuCount</strong><br>
Sets the default value for the number of virtual CPUs assigned when this module is run.</p>
<p>
        <a name="Walltime_brief"></a><strong>Job Walltime</strong><br>
Sets the default value for maximum duration of a run before automatic termination when this module is run.</p>

<hr>

<a name="editingPropertiesHelp"></a><h2>Creating and Editing Modules</h2>

The primary documentation for creating a GenePattern module is part of the 
<a href="https://www.genepattern.org/programmers-guide#_Writing_Modules_for_GenePattern">GenePattern Programmer's Guide</a>.
<br/><br/>
An example module that demonstrates the relationship between a GenePattern command line and the corresponding shell (terminal)
 command line using a simple function (written in Perl) is available on github at <a href="https://github.com/genepattern/ABasicModule">genepattern/ABasicModule</a>.  
Source code for many other GenePattern  modules is also available under <a href="https://github.com/genepattern/">github.com/genepattern</a>.
<br/><br/>


<strong>Note:</strong> Only the <%=messages.get("ApplicationName")%> team can create, edit or install modules on the <%=messages.get("ApplicationName")%> public server.
Therefore, to create a module, you must have a local <%=messages.get("ApplicationName")%> server installed.<br><br>

Creating a <%=messages.get("ApplicationName")%> module is a multi-step process:
<ol>
<li>Find or write a program that executes the desired function.
Any program that can be executed from the command line can be run as
a <%=messages.get("ApplicationName")%> module.
If you are writing the program, you can use any programming language;
for example, you can use a compiled language, such as C, to create an
executable or use a scripting language, such as Perl, to create a script
that is run by an interpreter. To use methods written in R, you should make a R wrapper that can be run with Rscript, which
can take arguments from a command line, load datasets as needed, and then call the desired R function 
(< href="https://github.com/genepattern/VoomNormalize/blob/master/src/run_gp_preprocess_read_counts.R">VoomNormalize example</a>).  </li>
<li>Use <%=messages.get("ApplicationName")%> to create a module that invokes
the program that you have written.
It takes just a few minutes to enter the necessary information in the module integrator.
You can decide which parameters from the algorithm to expose to the user and
can replace command line parameter names that are hard to remember with names
that are self-explanatory. You can also create a drop-down list of choices for parameters
to reduce the possibility of invoking the module with incorrect values.
</li>
<li>Run the module several times, testing it thoroughly before making it available to other <%=messages.get("ApplicationName")%> users.</li>
</ol>

When you save your changes, the module properties that you have entered are validated as follows:
<ul><li> Every parameter you have not marked as optional must be listed in the command line.</li>
<li>Every command line parameter must be either a parameter, environment variable, or system property.</li>
<li>The module name and parameter names must be legal - in general, you should avoid punctuation marks and other special characters. </li>
</ul>
If everything checks out, the uploaded files are saved in the
<%=messages.get("ApplicationName")%> module library and the module registered
in the module database. The module and its uploaded files are indexed in the background
so that they are available for searching. You can run the module immediately and can
share it with others.  <br>

<h3>Module Integrator Overview</h3>

<h4>Help</h4>
Click Help to display this text.
<h4>Save</h4>
Click Save to save your changes, creating a new version of the module, and remain in the module integrator.
<h4>Save and Run</h4>
Click Save and Run to save your changes, creating a new version of the module,
exit from the module integrator and run the module.

<br><br>

<h4>The following sections describe each module property in detail:  </h4>
<ul>
<li><a href="#taskLevelAttributes">Title Bar</a></li>
<li><a href="#details">Details</a></li>
<li><a href="#supportFiles">Support Files</a></li>
<li><a href="#DockerImage">Docker Image</a></li>
<li><a href="#Command">Command Line</a></li>
<li><a href="#inputParameters">Parameters</a></li>
</ul>
An example for each property is given based on the Consensus Clustering module, which may be
uploaded from the
<a href="<%=request.getContextPath()%>/pages/taskCatalog.jsf?taskType=Clustering&state=new&state=updated&state=up%20to%20date&name=ConsensusClustering">module repository</a> if you haven't already installed it.

<br><br><hr>
<a name="taskLevelAttributes"></a><h3>Title Bar</h3>

<a name="Name"></a><h4>Name</h4>
The name of the module will be used in the drop-down module catalog lists and as a directory name on the server with
this name.  It should be a short but descriptive name, without spaces or punctuation, and may be mixed
upper- and lower-case.<br><br>
ConsensusClustering example: <span class="example">ConsensusClustering</span>

<a name="Version"></a><h4>Version</h4>
Each time you update a module, you create a new version of the module.
Typically, you want to edit the most recent version of a module.
If you want to edit an earlier version, select that version from the drop-down list of versions.
<br><br><hr>

<a name="details"></a><h3>Details</h3>

<a name="LSID"></a><h4>LSID</h4>
The <a href="http://www.lsid.info/">Life Science Identifier (LSID)</a> used to uniquely identify a GenePattern module.
LSIDs are created or versioned automatically by the GenePattern server when a module is saved.  
To be able to edit a 
LSID you must be a GenePattern administrator and the server configuration must set the property 
<code>allowAdminEditNonLocalModules: true</code>.
<br><br>

ConsensusClustering example: <span class="example">urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00030:5.2 </span>

An LSID consists of five parts, e.g. urn:lsid  :  authority  :  namespace  :  id  :  version.
<ul>
<li><i>urn:lsid</i> -- a prefix indicating that this is an LSID which is a type of an <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Name">URN</a>.</li>
<li><i>authority</i> -- The name of an entity asserting and managing the identifier.  Usually an internet domain name or server address. e.g. broad.mit.edu</li>
<li><i>namespace</i> -- The namespace scoping the identifier.  This is arbitrary text defined by the authority.  e.g. "cancer.software.genepattern.module.analysis"</li>
<li><i>id</i> -- An identifier for an entity that is unique within the scope of the authority and namespace.  In GenePattern the ID is always an integer. e.g. 00030.  
Identifiers can (and frequently are) repeated in different namespaces and/or authorities.</li>
<li><i>version</i> -- An optional version for the identifier.  In GenePattern this is always integers with dots (".") to indicate sub versions.  e.g. 5.2 </li>

</ul>


<a name="Description"></a><h4>Description</h4>
The description is where to explain what your module does, and why someone would want to use it.
It can be anywhere from a sentence to a short paragraph in length.
The description, sometimes in abridged form, is displayed at the top of the form where the parameter values for the module are entered during run time in the web client.
It's a very good way for you to document succinctly why your module exists.<br><br>

ConsensusClustering example: <span class="example">Resampling-based clustering method</span>

<a name="Documentation"></a><h4>Documentation URL and  <i>(deprecated)</i> Documentation File </h4>

Documentation URL: Provide a URL (link) to a web page describing the module and how to use it. 
 This link will be available when users run the module.
<br/><br/>
Documentation File (<i> Deprecated </i>): Older modules may have included an uploaded pdf, txt, html, htm, xhtml, or rtf file 
instead of a URL. When present, a link to these files on the GenePattern server will be generated if no documentation 
URL is provided. You can modify this list of extensions by editing the files.doc property in the
GenePattern /resources/genepattern.properties file.  In cases where both a documentation file and a documentation URL are
provided, only the documentation URL will be displayed to users.<br><br/>

Module documentation should include:
<ul>
<li>an explaination what the module does and why someone might want to use it</li> 
<li>instructions for using the module</li>
<li>a detailed description of each input parameter</li>
<li>a detailed description of each output file (both its format and content)</li>
<li>the identity of the author and their contact information</li>
<li>an explanation of the algorithm or a reference to the paper, journal or book that explains it and other reference papers that would be useful for a user</li>
<li>the Docker container tag in which the module runs</li>
<li>the language in which the module was written</li>
<li>links to one or more example known good input and their corresponding outputs, 
so that users can see data that works in the module. Include any settings require to achieve the 
included output (an execution log would suffice)</li>
<li>version comments so that your users know what changed from version to version</li>
</UL>
<BR/>

<a name="SourceRepository"></a><h4>Source Repository</h4>
Provide a URL to the source code of your module, specific to the tag or release that corresponds to the module version.<br>
For example - v0.13 of TCGA.SampleSelection has for its source repository <span class="example">https://github.com/genepattern/TCGA.SampleSelection/tree/v0.13</span>

<a name="Author"></a><h4>Author</h4>
Enter the author&apos;s name.  If you share this module
with others, they will know how to give the author credit and whom to contact with questions, suggestions,
or enhancement ideas.<br><br>

ConsensusClustering example: <span class="example">Stefano Monti</span>

<a name="Organization"></a><h4>Organization</h4>
Enter the author&apos;s affiliation (company or academic institution).  If you share this module
with others, they will know how to give the author credit and whom to contact with questions, suggestions,
or enhancement ideas.<br><br>

<a name="License"></a><h4>License</h4>
Upload a text file containing the End-User license agreement. Users will be prompted to accept this license
before running the module. <br>

<a name="VersionIncrement"></a><h4>Version increment</h4>
Set the next module (LSID) version based on the current version level {major}.{minor}.{patch}. For new modules, 
the initial major version is v1, the initial minor version is v0.1 and the initial patch version is v0.0.1. 
By default, increment the current version level, (<em>e.g. save v1 as v2, v1.1 as v1.2</em>).
Example usage:<br/>
<ul>
<li><b>major (X)</b> save new major version ... 
<ul><li><em>v1</em>, new module saves as v1.</li>
    <li><em>v1 to v2</em>,     from major, <em>same as default</em></li>
    <li><em>v1.4 to v2</em>,   from minor, decrease level</li>
    <li><em>v1.0.1 to v2</em>, from patch, decrease level by 2</li>
</ul>
</li>
<li><b>minor (X.Y)</b> save new minor version ... 
<ul><li><em>v1 to v1.1</em>,     from major, increase version level</li>
    <li><em>v1.1 to v1.2</em>,   from minor, <em>same as default</em></li>
    <li><em>v1.0.1 to v1.1</em>, from patch, decrease level</li>
</ul>
</li>
<li><b>patch (X.Y.Z)</b> save new patch version ...
<ul><li><em>v1 to v1.0.1</em>, from major, increase version level by 2</li>
    <li><em>v1.4 to v1.4.1</em>, from minor, increase version level</li>
    <li><em>v1.0.1 to v1.0.2</em>, from patch, <em>same as default</em></li>
</ul>
</li>
</ul>

Note: The Version Increment menu is only enabled when editing the latest installed version of a module.
This avoids potential problems with duplicate version numbers (aka collisions). 
The system will automatically select the next unique version, increasing the version level 
(<em>e.g. save v2.1 as v2.1.1</em>) if needed.
<br>

<a name="VersionComment"></a><h4>Version Comment</h4>
Enter a brief description of the changes that you have made to the module. When GenePattern clients display a drop-down list of versions on the Install from Repository page, the comments for each version are visible in the drop-down list.
<br><br>
ConsensusClustering example: <span class="example"><i>Added ability to create heatmap images of clusters</i></span>

<a name="TaskType"></a><h4>Module Category</h4>
On the GenePattern home page, modules and pipelines are organized by categories.
Pipelines are always assigned to the category name pipeline.
When you create/update a module, you can choose an existing category name or create a new category name.
If your module fits into an existing category, such as Preprocess & Utilities,
select that category from the drop-down list; otherwise, click the New button to add a new category.
GenePattern creates the drop-down list of categories dynamically based on the categories of the modules
installed on your GenePattern server. If you delete the last module in a given category,
that category is removed from the drop-down list.


ConsensusClustering example: <span class="example">Clustering</span>


<a name="Privacy"></a><h4>Privacy</h4>
Modules may be marked as either public or private.
When a module is first created, the default is to mark it private.
<ul>
<li>Public modules are accessible to everyone who uses the server
on which it resides. </li>
<li>
Private modules may be accessed only by the module's owner, which is the username that the user logged in with.
Private modules are not visible to others building pipelines or running modules.
When a module is first created, the default is to mark it private.
</li></ul>
ConsensusClustering example: <span class="example">public</span>

<a name="Quality"></a><h4>Quality Level</h4>
The quality level is a simple three-level classification that lets the user know what level of confidence the
author has in the robustness of the module.  In increasing order of
quality expectations, they are: are &quot;development&quot;, &quot;preproduction&quot;, and &quot;production&quot;.
Although these terms have no strict definitions, they are useful for setting user expectations.
If you make this module public, set the quality level appropriately.
<br>
<br>
ConsensusClustering example: <span class="example">production</span>
<a name="cpu"></a><h4>CPU Type</h4>
If your module is compiled for a specific platform (Intel, Alpha, PowerPC, etc.), indicate that here.
CPU requirements are enforced when the module is run.<br><br>

ConsensusClustering example: <span class="example">any</span>

<a name="os"></a><h4>Operating System </h4>
If your module requires a specific operating system (Windows, Linux, MacOS, etc.), indicate that here.
Operating system requirements are enforced when the module is run.<br><br>

ConsensusClustering example: <span class="example">any</span>

<a name="Language"></a><h4>Language</h4>
There is no specific language support or requirement enforcement at this time.  However, by describing the
primary language that a module is implemented in, you give some hints to the prospective user about their
system requirements.<br><br>

ConsensusClustering example: <span class="example">Java</span>

<a name="MinLanguage"></a><h4>min. language level</h4>
If your module requires at least a certain revision of the language runtime environment(eg.
<span class="example">1.3.1_07</span>), indicate that here. This is not currently enforced, but provides useful information to the prospective module
user.<br><br>

ConsensusClustering example: <span class="example"><i>none specified</i></span>

<a name="OutputDescription"></a><h4>Output File Formats</h4>

Select the file formats of the output files generated by your module.
If your module generates an output file format not included in the list, click New to add that format to the list.
<br><br><hr>

<a name="supportFiles"></a><h3>Support Files</h3>
Any files required by your module, such as scripts, libraries, property files, DLLs, executable programs, etc.
must be uploaded to the server. These files may be referenced in the command line field
using the <span class="example">&lt;libdir&gt;<i>filename</i></span> nomenclature.
There is no upper limit on the number of files which may be uploaded, assuming there is enough disk space.

<ul>
<li>To add a file, either click Add Files and select the file to add or drag and drop a file from your local file system. When you save the module,
GenePattern copies the file to the server and adds it to the Current Files list.</li>

<li>To remove a newly added file, click the x icon to the left of the file. To remove a file from Current Files list, select the check box next to the file.
This file will be deleted when the module is saved. When you save the module, GenePattern removes the file from the server and the Current Files list.</li>
</ul>

<h4>Advanced Parameters</h4>
A file named paramgroups.json can be provided to change the layout of the parameters on the module run form. For example, this can be used
to group the parameters into separate Basic and Advanced sections.

The paramgroups.json file contains a list of objects in JSON format with the following keys:

<ul>
    <li>name - This is a required key that takes a path style name for the parameter group in which you can specify the
        hierarchy of the parameter group. For example, setting the name to  "/Basic/Required" would mean that the Required
        section would appear under a top level section named Basic. In other words, Required is a sub parameter group of
        the Basic parameter group.
    </li>

    <li>parameters - This is an optional key that takes a list containing the actual names of the parameters that should
        be in the parameter group.
    </li>

    <li>hidden - This is an optional key that can be set to either true or false with true indicating that the parameter
        group should be displayed in collapsed mode. The default is to display the parameter group in the expanded mode.
    </li>

    <li>Top level parameter groups and also parameters will be displayed in the order they are defined in the
        paramgroups.json file.
    </li>
</ul>

Here is an example of the contents of this file:

[{name: "/Basic/Required", parameters: ["input.file"]},
{name:"Advanced", parameters: ["input.format", "optional.file", "size"], hidden:true},
{name: "/Basic/Optional", parameters: ["count", "clusters"]}]

<p>
    The parameter groups would be structured like this:

    <ul>
        <li>
            Basic

            <ul>
                <li>Required

                    <ul>
                        <li>input.file</li>
                    </ul>
                </li>
                <li>
                Optional

                    <ul>
                        <li>count</li>

                        <li>clusters</li>
                    </ul>
                </li>
             </ul>
        </li>
        <li>Advanced
            <ul>
                <li>input.format</li>

                <li> contaminant.file </li>

                <li> size </li>
            </ul>
        </li>
    </ul>
</p>

<h4>Current Files</h4>
Files that have been previously uploaded appear as links in the Current Files section. You may view or download them by clicking appropriately
in your browser.
<br><br>

ConsensusClustering example: <span class="example">Current files: </span> <span class="exampleLink">Acme.jar</span> <span class="exampleLink">archiver.jar</span> <span class="exampleLink">common_cmdline.jar</span> <span class="exampleLink">ConsensusClustering.pdf</span> <span class="exampleLink">file_support.jar</span> <span class="exampleLink">geneweaver.jar</span> <span class="exampleLink">gp-common.jar</span> <span class="exampleLink">ineq_0.2-2.tar.gz</span> <span class="exampleLink">ineq_0.2-2.tgz</span> <span class="exampleLink">jaxb-rt-1.0-ea.jar</span> <span class="exampleLink">my.local.install.r</span> <span class="exampleLink">RunSomAlg.jar</span> <span class="exampleLink">trove.jar</span> <span class="exampleLink">version.txt</span>


<br/><br/><hr>
<a name="DockerImage"></a><h3>Docker Image (job.docker.image)</h3>
Each GenePattern job runs in a docker container. Each module must declare a docker image by setting the 
<span class="example">job.docker.image</span> property in the manifest file. This is passed as the arg to 
the <a href="https://docs.docker.com/engine/reference/commandline/run/">docker run command</a>.
For production modules this should be a tagged version of an image from a public repository. 
<br/>
<span class="example"><pre>
Manifest file format:
  job.docker.image=<em>IMAGE[:TAG|@DIGEST]</em>
  job.docker.image=<b>genepattern/docker-java17:0.12</b>

Command line format:
  $ docker run <em>[OPTIONS] &lt;job.docker.image&gt; &lt;commandLine&gt;</em>
  $ docker run <em>[OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]</em>
  $ docker run <b>genepattern/docker-java17:0.12</b> java -version
</pre></span>

Check out the <a href="https://hub.docker.com/u/genepattern/">GenePattern organization in DockerHub</a> for a list of images that we maintain.
<p>Additional links
<ul>
<li>Default image repository: <a href="https://hub.docker.com/r/genepattern/docker-java17">hub.docker.com/r/genepattern/docker-java17</a>.</li>
<li>Tags for default image repository: <a href="https://hub.docker.com/r/genepattern/docker-java17/tags/">hub.docker.com/r/genepattern/docker-java17/tags</a>.</li>
<li>DockerHub overview: <a href="https://docs.docker.com/docker-hub/">docs.docker.com/docker-hub</a>.</li>
</ul>
<br><br><hr>
<a name="jobOptions"></a><h3>Job Options</h3>
<p>The job option  settings are optional and may be overridden by the GenePattern administrator of any GenePattern server.  
Additional options may be set by the administrators as well, but the following three job options are the most common 
and as such you may set suggested default values for them in the Module Integrator.</p>
<p>
<a name="jobMemory"></a><h4>Job Memory</h4>
This sets the maximum amount of memory that could be potentially allocated to a job running this module.  If the module attemps to
allocate a greater amount it will result in an run error, reported in the stderr.txt file.  The exact error messages that may appear 
vary depending on the details of docker container running the module and also the docker launch system used (i.e. local docker daemon, Singularity or
AWS batch).  
</p>
<p>
<a name="jobCpuCount"></a><h4>Job cpuCount</h4>
This sets the number of virtual CPUs allocated to a job running this module.  For modules taking advantage of parallel or 
multi-threaded implementations higher CPU counts can greatly reduce the module runtime.  However more CPUs also increase the cost
of an analysis and provide no benefit for single-threaded or non-parallel modules, which are much more common.
</p>
<p>
<a name="jobWalltime"></a><h4>Job Walltime</h4>
The walltime is the maximum duration allowed for a job running this module to take.  If the job exceeds this walltime, 
the GenePattern server will automatically kill it when this time limit is reached.  Setting a default walltime greater
than the execution time needed generally has no negative effects for normal runs, but may increase the cost of runs
where the module fails but does not exit, therefore it is recommended to set this only slightly longer than the expected 
execution time for a typical dataset.
</p>



<br><br><hr>
<a name="Command"></a><h3>Command Line</h3>
The crux of adding a module to the <%=messages.get("ApplicationName")%> server is to provide the command line that will be used to
launch the module, including substitutions for settings that will be specified differently for each invocation.
In the command line field, you will provide a combination of the fixed text and the dynamically-changed
text which together constitute the command line for an invocation of the module.<br><br>

For example, if at a terminal (shell) you would run a piece of code like this;  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;<code>/usr/bin/python /path/to/source/log_transform.py /path/to/input/myInputFile.gct /path/to/output/transformed.gct</code><br/>
  then the corresponding GenePattern command line would look like this: <br/>
  &nbsp;&nbsp;&nbsp;&nbsp;<code>/usr/bin/python &lt;libdir&gt;log_transform.py &lt;input.filename&gt; &lt;output.file&gt;</code>
<br/>
<br/>
The changes to &lt;tokens&gt;'s are so that GenePattern knows how to substutute parameters to the command line in a way the module
code will recognize, and provide full paths for input and output files. 
In the past, before using a docker container with the module executables inside was standard, tokens can also be used to
localize your command giving it paths to executables like java, python or Rscript which could differ between GenePattern servers.  
When you are using a dedicated docker container, then you can give the exact paths to the executable and source,
 but the parameters will still need to be changed into &lt;tokens&gt; that the  GenePattern server 
 can provide based on the specifics of the job.

<br/><br/>

<strong>Parameters:</strong> Parameters that require substitution should be enclosed in brackets (ie. &lt;filename&gt;).
Every parameter listed in the parameters section must be mentioned in the command line
unless its optional field is checked.  A default value
may be provided and will be used if the user fails to specify a value when
invoking the module.<br><br>

Click the View Argument List button to display a list of the parameters mentioned in the command line.
You can change the order of the parameters by dragging them to a new position in the list or
by editing the text of the command line.<br><br>


<strong>Substitution properties:</strong> In addition to parameter names, you may also use environment variables,
<a href="http://java.sun.com/docs/books/tutorial/essential/system/properties.html" target="_blank" style="white-space: nowrap;">Java system properties</a>,
and any properties defined in the %<%=messages.get("ApplicationName")%>InstallDir%/resources/genepattern.properties file.
 Useful substitution properties include:<br><br>

<table>
<tr><td valign="top"><span class="example">&lt;java_flags&gt;</span></td><td>memory size and other Java JVM settings from the <%=messages.get("ApplicationName")%>/resources/genepattern.properties file</td></tr>
<tr><td valign="top"><span class="example">&lt;job_id&gt;</span></td><td>job number</td></tr>
<tr><td valign="top"><span class="example">&lt;name&gt;</span></td><td>name of the module being run</td></tr>
<tr><td valign="top"><span class="example">&lt;<i>filename</i>_basename&gt;</span></td><td>for each input file parameter, the filename without extension or directory</td></tr>
<tr><td valign="top"><span class="example">&lt;<i>filename</i>_extension&gt;</span></td><td>for each input file parameter, the extension without filename or directory</td></tr>
<tr><td valign="top"><span class="example">&lt;<i>filename</i>_file&gt;</span></td><td>for each input file parameter, the filename and extension without directory</td></tr>
<tr><td valign="top"><span class="example">&lt;path.separator&gt;</span></td><td>Java classpath delimiters (&#58; or &#59;), useful for specifying a classpath for Java-based modules</td></tr>
<tr><td valign="top"><span class="example">&lt;file.separator&gt;</span></td><td>/ or \ for directory delimiter</td></tr>
<tr><td valign="top"><span class="example">&lt;line.separator&gt;</span></td><td>newline, carriage return, or both for line endings</td></tr>
<tr><td valign="top"><span class="example">&lt;user.dir&gt;</span></td><td>current directory where the job is executing</td></tr>
<tr><td valign="top"><span class="example">&lt;user.home&gt;</span></td><td>user's home directory</td></tr>
</table>
<br>
In addition, for older, pre-docker, modules there are predefined values for &lt;java&gt;, &lt;python&gt;, and
&lt;R&gt;, three languages that are used within various modules that may be downloaded from the module catalog at
the public <%=messages.get("ApplicationName")%> website. These older modules were built before docker was used to encapsulate 
module runtimes and could be used to localize paths for any given GenePattern server.  Their use is deprecated and they are listed here only 
as documentation for said older modules.<br/><br/>
<table>
<tr><td valign="top"><span class="example">&lt;java&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>path to Java, the same one running the <%=messages.get("ApplicationName")%> server</td></tr>
<tr><td valign="top"><span class="example">&lt;perl&gt;</span></td><td>path to Perl, installed with <%=messages.get("ApplicationName")%> server on Windows, otherwise the one already installed on your system</td></tr>
<tr><td valign="top"><span class="example">&lt;R&gt;</span></td><td>path to a program that runs R and takes as input a script of R commands.  R is installed with <%=messages.get("ApplicationName")%>server on Windows and MacOS</td></tr>
<tr><td valign="top"><span class="example">&lt;libdir&gt;</span></td><td>Used if a module needs the path to the directory where the module's support files are stored</td></tr>
</table>


<br/><br/>
When using a docker container with your executables built into it, , you may use the paths to executables within 
the container directly.  However if you are using a generic container (e.g. <a href="https://hub.docker.com/_/python">Python</a>) 
you may still need to provide paths to your source files.  These will be injected into the container and mounted at a location
defined by the token &lt;libdir&gt;.

For example,<br><br>
<span class="example">/usr/bin/java -cp &lt;libdir&gt;mymodule.jar com.foo.MyModule &lt;arg1&gt;</span><br><br>
<%=messages.get("ApplicationName")%> will then take care of locating the Java runtime,
asking it to begin execution at the <span class="example">MyModule</span> class using code from the uploaded file
 <span class="example">mymodule.jar</span>.<br><br>

<strong>Standard input/output:</strong>
If your module is designed to accept a standard input stream and/or write to a
standard output stream, you can use redirection syntax when describing the command line.
To redirect a file to the input stream, enter the text \&lt; followed by the input file parameter.
To redirect the standard output or standard error streams to a named file, enter the
text \&gt; or \\&gt;&amp; followed by the name of the output file. In the following example,
the LogTransform module reads its input from the standard input stream and writes its output to
the standard output stream:
<br><br>
    <span class="brcode">python &lt;libdir&gt;log_transform.py \&lt; &lt;input.filename&gt; \&gt; &lt;output.file&gt;</span>

<br><br>

<strong>ConsensusClustering example</strong> (actually all on one line): <br>
<span class="example">java &lt;java_flags&gt; -DR_HOME=&lt;R_HOME&gt; -cp &lt;libdir&gt;geneweaver.jar edu.mit.wi.genome.geneweaver.clustering.ConsensusClustering &lt;input.filename&gt; &lt;kmax&gt; &lt;niter&gt; &lt;normalize.type&gt; -N &lt;norm.iter&gt; -S &lt;resample&gt; -t &lt;algo&gt; -L &lt;merge.type&gt; -i &lt;descent.iter&gt; -o &lt;out.stub&gt; -s -d &lt;create.heat.map&gt; -z &lt;heat.map.size&gt; -l1 -v</span>

<br><br><hr>
<a name="inputParameters"></a><h3>Parameters</h3>

The input parameters section of the form appears perhaps to be the most daunting.  And yet there is
little that is required to make a working module declaration.  Each parameter in the command line that comes from a
user input must have an entry in this section.  Otherwise the clients would know nothing about how to
prompt the user for input nor could they explain to the user what type of input is expected.<br><br>

To add one or more parameters, enter the number of parameters to add and click the Add Parameter button.

<a name="paramName"></a><h4>Name</h4>
Each parameter has a name, which can be whatever
you like, using letters, numbers, and period as a separator character between &quot;words&quot;.  It can be of mixed
upper- and lower-case.  The name is used inside &lt;brackets&gt; within the command line to indicate that the
value of that variable should be substituted at that position within the command line.  The name is also used as
a label within the web client to prompt the user for the value for that field.  And the name is used as
a way of identifying which parameter is which for the scripting clients.<br><br>


ConsensusClustering examples: <span class="example">kmax</span>, <span class="example">input.filename</span>

<a name="paramOptional"></a><h4>Optional</h4>

Some parameters are not required on the command line.  These parameters, when left blank by the user when the module
is invoked, result in nothing being added to the command line for that parameter.


<a name="paramDescription"></a><h4>Description</h4>
The description field is optional, but is very useful.  It allows the module author to provide a more detailed description
than the name itself.  What is the &quot;kmax&quot; parameter used for?  Does it interact with any other parameters?
Do you have any advice about what is a reasonable range of settings for it?  The description is displayed by the
<%=messages.get("ApplicationName")%> clients when they prompt for input for each field.<br><br>

ConsensusClustering example: <span class="example">Type of clustering algorithm</span>


<a name="paramFlag"></a><h4>Flag</h4>

Some parameters need to have extra text prefixing them on the command line when they are specified.
For example, you might need to write &quot;-F <i>filename</i>&quot; to pass in a filename.
The prefix text &quot;-F&quot; or &quot;-F &quot; would be specified here.
To insert a space between the flag and the parameter, add the space to the prefix text.<br><br>

example (with space): <span class="example">-F <i>inputfile</i></span>
<br>
example (without space): <span class="example">-F<i>inputfile</i></span>

<a name="paramType"></a><h4>Type of field to display</h4>
Select whether parameter input field is a text field or file field. A text field should be used for any input parameter
other than an input file. If a user selects Text Field, a drop-down list for selecting how the text should be interpreted will appear.
The available choices are:

<ul>
    <li> Text </li>
        This option will provide the user with a standard text input field where any input can be entered.
    <li>Integer</li>
        This option will provide the user with a text field where only an integer should be entered.
    <li>Floating Point</li>
        This option will provide the user with a text field where only a floating point number should be entered.
    <li>Directory</li>
        This option will provide the user with a text field where the input will be interpreted as a directory path available
        on the server file system.
    <li>Password</li>
        This option will provide the user with a text field where the input will be masked with dots.
</ul>
<p>
    If <i>File Field</i> is chosen for <i>Type of field to display</i>, the parameter will specify an input file.  When an input parameter
    is identified as a File Field, GenePattern will pass to the module the path to the file.
    When <i>File Field</i> is chosen, a <i>File Format</i> drop-down check list will appear in the third column.  Use this to select the
    valid file format(s) for this input file parameter.  If your module requires an input file format not included in the
    check list, click <i>New</i> to add that format to the list.  The new file format will be appended to the end of the list.
</p>

<h4> Drop-down list </h4>
<p>
Some parameters are best represented as a drop-down list of choices.  By constraining input to those from the list,
the user is saved typing and cannot make a mistake by choosing an invalid setting (unless there is a dependency
on some other parameter). To enter the choices, click the "add drop-down list" link and enter the
choices in the Create drop-down list window.
<br><br>
For text fields, you can create only a static drop-down list. Enter the value required by the program (Value) and, optionally, a more
human-readable value (Display Value). You can also specify which item you want to be the default value. If the item you want to be the
default has only a display value and no command line value then you must make this item the first in the list. When you exit from the Create drop-down list window,
the total number of choices is listed. For example:
<br><br>

<span class="example"><img src='/gp/css/frozen/modules/styles/images/create-static-choice.png' width='602' height='167'></span>
<br>
<form>
    <table>
        <tr>
            <td valign="top">
                would create a drop-down list that looks like this:
            </td>
            <td>
                <img src='/gp/css/frozen/modules/styles/images/static-choice-drop-down.png' width='265' height='150'>
            </td>
        </tr>
    </table>
</form>
<br><br>
For file fields, you can create either a dynamic or static drop-down list. Creation of a static drop-down list is the same as
for text fields but the command line values must be urls in ftp, http, or https format.
<br>
Dynamic drop-down lists are drop-down lists that are populated using files available on an ftp directory URL or S3 pseudo-directory URI. For example:
<br>
<p>
FTP directory:  <span class="example">ftp://gpftp.broadinstitute.org/pub/rna_seq/referenceAnnotation/gtf/</span>

<form>
    <table>
        <tr>
            <td valign="top">
            would create a drop-down list that looks like this:
            </td>
            <td>
                <img src='/gp/css/frozen/modules/styles/images/dynamic-drop-down.png' width='340' height='220'>
            </td>
        </tr>
    </table>
</form>
<br>
Similarly an S3 directory URI could be used.  HTTP URLs to S3 directories man NOT be used as it is not possible to easily retrieve 
the directory contents that are to be used to form the list.<br/>
<p>S3 Directory: s3://datasets-genepattern-org/data/</p>
<br/>
By default all files in the top level ftp/S3 directory will be included in the drop-down list. Optionally, you can filter items in the drop-down list by name or type.
<br>
An example of filtering by name using a case-sensitive glob pattern:
<ol>
    <li>
        <i>*.gtf </i> - include only items whose names end with the .gtf
    </li>
    <li>
        <i>!*.gtf</i> - include all items except those whose name ends with .gtf
    </li>
    <li>
        <i>*.gtf;*.fasta;*.txt</i> - include only items whose names end with .gtf, .fasta, or .txt
    </li>
</ol>

An example of filtering by type:
<ol>
    <li>
        <i>type=file</i> - include all files in the top level directory
    </li>
    <li>
        <i>type=dir</i> - only include matching directories
    </li>
    <li>
        <i>type=all</i> - include both files and directories
    </li>
</ol>

You can also combine name and type filters. The following is an example of filter based both on name and type:
<ol>
    <li>
        <i>type=dir&human*</i>  - include only directories whose name starts with human
    </li>
</ol>

For a dynamic drop-down list, there is also the option of having an alternative static drop-down list. This alternative static drop-down list will only be displayed in the event that
there was an error in obtaining the list of files in the ftp directory URL. This alternative static drop-down list works the same way as described above.

<a name="multipleInputs"></a><h4>Multiple Inputs</h4>

Indicate the number of inputs that can be provided to a parameter. You must specify a minimum number of inputs which can be zero.
The maximum number of inputs allowed can be set to unlimited.
<br/>

<br/>
For a file parameter, the input to the parameter will be one text file containing local paths to the input files. There will be one file path per line.

<br/>
<a name="listMode"></a><h4>List Mode</h4>

For a parameter that is not a file then the format of the input on the command line is determined by the value set for list mode.
If list mode is <b>List</b> then the input value is formatted as a comma separated list.

<br/><br/>
For example if the values specified for a non file parameter are val1,val2 and val3 then the value on the command line would be <i>val1,val2,val3</i>.

<br/><br/><br/>
If the list mode is <b>Get-opt style list</b>, then the input values are provided as a space separated list with the flag prepended to each value.
<br/> <br/>
For example if the flag specified for the parameter is <i>--input=</i> and the value entered for the parameter is <i>value1</i> and <i>value2</i>,
then the value on the command line would be is <i>--input=value1 --input=value2</i>


<a name="fileGroup"></a><h4>Group Input Files</h4>
Specify how the input files for a parameter should be grouped. The input to the parameter will be a three-column tab delimited text file.
The first column contains the local path to the file. The second column has the group assignment of the file. The third column contains the URL to the file.

<a name="paramDefault"></a><h4>Default Value</h4>

Some parameters should have a default value which will be supplied on the module's command line if no setting
is supplied by the user when invoking the module.  This is not the same as the defaults defined in the
program invoked by the module.
Instead, this allows the module author to create a default, even when none exists in the program being invoked by the module.<br><br>

The default value may use substitution variables, just like the rest of the command line.  So
a valid default for an output file might be <span class="example">&lt;input.filename_basename&gt;.foo</span>,
meaning that the output file will have the same stem as the input.filename parameter, but will have a .foo extension.
<br><br>
Default values for parameters that have a static drop-down list must be either blank or one of the values from the choice list.
Any other setting will result in an error message.  If no default for a drop-down list is provided, the first entry
on the list will be the default.
<br><br>
<b>NOTE:</b> For any item in a static drop list where the value to pass on the command line is blank, it will need to be the first item
in the list in order to be the default selection.
<br><br>
For file parameters that have a dynamic drop-down list, the default value can only be a url to a file found in the provided ftp directory URL.
<br>
For example:
<br/>
<ul><li>
    FTP directory:  <span class="example">ftp://gpftp.broadinstitute.org/pub/rna_seq/referenceAnnotation/gtf/</span>
    <br>
    Default value: <span class="example">ftp://gpftp.broadinstitute.org/pub/rna_seq/referenceAnnotation/gtf/Homo_sapiens_UCSC_hg18.gtf</span>
</li></ul>

<a name="Range"></a><h4>Range</h4>

For a numeric parameter that takes either a float or an integer, this is the minimum and maximum values that can be provided as input.
When running the module the user will not be allowed to enter any values that are outside the minimum and maximum range.

<br/><br/>
</body>
</html>


