/*******************************************************************************
 * Copyright (c) 2003-2022 Regents of the University of California and Broad Institute. All rights reserved.
 *******************************************************************************/
package org.genepattern.server.job.input.collection;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.genepattern.junitutil.FileUtil;
import org.junit.Assert;
import org.junit.Rule;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.rules.TemporaryFolder;


/**
 * junit tests for the TsvWriter class.
 * @author pcarr
 *
 */
public class TestTsvWriter {
    @Rule
    public TemporaryFolder tmpDir = new TemporaryFolder();

    private static class Table {
        private List<Line> lines;
        public void addLine(Line line) {
            if (lines==null) {
                lines=new ArrayList<Line>();
            }
            lines.add(line);
        }
        
        public int getNumLines() {
            if (lines==null) { return 0; }
            return lines.size();
        }
    }
    
    private static abstract class Line {
    }
    private static class CommentLine extends Line {
        private final String comment;
        public CommentLine(final String comment) {
            this.comment=comment;
        }
    }
    private static class DataLine extends Line {
        private final String[] values;
        public DataLine(final String[] values) {
            this.values=new String[values.length];
            System.arraycopy(values, 0, this.values, 0, values.length);
        }
    }
    private Table read(final File fromFile) throws IOException {
        Table table=new Table();
        BufferedReader reader=null;
        try {
            final CharsetDecoder dec=Charset.forName("UTF-8").newDecoder();
            reader=new BufferedReader( 
                    new InputStreamReader(new FileInputStream(fromFile),dec) );
            final String delim=Pattern.quote(TsvWriter.TAB);
            String line=null;
            while((line=reader.readLine()) != null) {
                if (line.startsWith(TsvWriter.COMMENT_CHAR)) {
                    //ignore
                    table.addLine(new CommentLine(line));
                }
                else {
                    final String[] values=line.split(delim);
                    table.addLine(new DataLine(values));
                }
            }
        }
        finally {
            if (reader != null) {
                reader.close();
            }
        }
        return table;
    }
    
    @Test
    public void testTsvWriter() throws Exception {
        final File toFile=tmpDir.newFile("my_test.tsv");
        final TsvWriter writer = new TsvWriter();
        writer.init(toFile);
        writer.writeRow(new String[] {"ROWNUM", "VALUE", "GROUP", "URL", "COMMENT"});
        writer.writeComment(" This is an example tsv file generated by the TestTsvWriter junit test");
        writer.writeRow(new String[] {"0", "/xchip/test/a.txt", "test", "http://127.0.0.1:8080/gp/data//xchip/test/a.txt", "An example server file path"});
        writer.writeRow(new String[] {"1", "3.14", "test", "", "pi"});
        writer.finish();
        
        Table table=read(toFile);
        Assert.assertEquals("table.numLines", 4, table.getNumLines());
    }
    
    @Test
    public void testGroupFileWriter() throws Exception {
        final File toFile=tmpDir.newFile("example_file_group.tsv");
        final TsvWriter writer = new TsvWriter();
        writer.init(toFile);
        writer.writeRow(new String[] {"VALUE", "GROUP", "URL"});
        writer.writeComment(" This is an example file group tsv file generated by the TestTsvWriter junit test");
        writer.writeRow(new String[] {"/xchip/test/a.txt", "test", "http://127.0.0.1:8080/gp/data//xchip/test/a.txt" });
        writer.writeRow(new String[] {"/xchip/test/b.txt", "test", "http://127.0.0.1:8080/gp/data//xchip/test/b.txt" });
        writer.writeRow(new String[] {"/xchip/test/c.txt", "test", "http://127.0.0.1:8080/gp/data//xchip/test/c.txt" });
        writer.writeRow(new String[] {"/xchip/test/d.txt", "test", "http://127.0.0.1:8080/gp/data//xchip/test/d.txt" });
        writer.writeRow(new String[] {"/xchip/train/a.txt", "train", "http://127.0.0.1:8080/gp/data//xchip/train/a.txt" });
        writer.writeRow(new String[] {"/xchip/train/b.txt", "train", "http://127.0.0.1:8080/gp/data//xchip/train/b.txt" });
        writer.writeRow(new String[] {"/xchip/train/c.txt", "train", "http://127.0.0.1:8080/gp/data//xchip/train/c.txt" });
        writer.writeRow(new String[] {"/xchip/train/d.txt", "train", "http://127.0.0.1:8080/gp/data//xchip/train/d.txt" });
        writer.finish();
        
        //direct file comparison check
        final File expectedFile=FileUtil.getSourceFile(this.getClass(), "example_file_group.tsv");
        Assert.assertTrue("The files differ!", FileUtils.contentEquals(expectedFile, toFile));
        
        //parse into a table reader
        Table table=read(toFile);
        Assert.assertEquals("table.numLines", 10, table.getNumLines());
    }
    

}
